// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class UpdateInfo {
  UpdateInfo({
    required this.availableVersionCode,
    required this.installStatus,
    required this.packageName,
    required this.updateAvailability,
  });

  int availableVersionCode;

  int installStatus;

  String packageName;

  int updateAvailability;

  Object encode() {
    return <Object?>[
      availableVersionCode,
      installStatus,
      packageName,
      updateAvailability,
    ];
  }

  static UpdateInfo decode(Object result) {
    result as List<Object?>;
    return UpdateInfo(
      availableVersionCode: result[0]! as int,
      installStatus: result[1]! as int,
      packageName: result[2]! as String,
      updateAvailability: result[3]! as int,
    );
  }
}

class RequestResponse {
  RequestResponse({
    required this.status,
  });

  String status;

  Object encode() {
    return <Object?>[
      status,
    ];
  }

  static RequestResponse decode(Object result) {
    result as List<Object?>;
    return RequestResponse(
      status: result[0]! as String,
    );
  }
}

class DownloadResponse {
  DownloadResponse({
    required this.code,
  });

  int code;

  Object encode() {
    return <Object?>[
      code,
    ];
  }

  static DownloadResponse decode(Object result) {
    result as List<Object?>;
    return DownloadResponse(
      code: result[0]! as int,
    );
  }
}

class _RustoreUpdateCodec extends StandardMessageCodec {
  const _RustoreUpdateCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DownloadResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is RequestResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is UpdateInfo) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DownloadResponse.decode(readValue(buffer)!);
      case 129: 
        return RequestResponse.decode(readValue(buffer)!);
      case 130: 
        return UpdateInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class RustoreUpdate {
  /// Constructor for [RustoreUpdate].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  RustoreUpdate({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _RustoreUpdateCodec();

  Future<UpdateInfo> info() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.RustoreUpdate.info', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as UpdateInfo?)!;
    }
  }

  Future<RequestResponse> request() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.RustoreUpdate.request', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as RequestResponse?)!;
    }
  }

  Future<DownloadResponse> download() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.RustoreUpdate.download', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DownloadResponse?)!;
    }
  }

  Future<void> complete() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.RustoreUpdate.complete', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
