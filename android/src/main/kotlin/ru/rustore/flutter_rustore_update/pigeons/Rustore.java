// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.rustore.flutter_rustore_update.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Rustore {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UpdateInfo {
    private @NonNull Long availableVersionCode;

    public @NonNull Long getAvailableVersionCode() {
      return availableVersionCode;
    }

    public void setAvailableVersionCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"availableVersionCode\" is null.");
      }
      this.availableVersionCode = setterArg;
    }

    private @NonNull Long installStatus;

    public @NonNull Long getInstallStatus() {
      return installStatus;
    }

    public void setInstallStatus(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"installStatus\" is null.");
      }
      this.installStatus = setterArg;
    }

    private @NonNull String packageName;

    public @NonNull String getPackageName() {
      return packageName;
    }

    public void setPackageName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"packageName\" is null.");
      }
      this.packageName = setterArg;
    }

    private @NonNull Long updateAvailability;

    public @NonNull Long getUpdateAvailability() {
      return updateAvailability;
    }

    public void setUpdateAvailability(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"updateAvailability\" is null.");
      }
      this.updateAvailability = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UpdateInfo() {}

    public static final class Builder {

      private @Nullable Long availableVersionCode;

      public @NonNull Builder setAvailableVersionCode(@NonNull Long setterArg) {
        this.availableVersionCode = setterArg;
        return this;
      }

      private @Nullable Long installStatus;

      public @NonNull Builder setInstallStatus(@NonNull Long setterArg) {
        this.installStatus = setterArg;
        return this;
      }

      private @Nullable String packageName;

      public @NonNull Builder setPackageName(@NonNull String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Long updateAvailability;

      public @NonNull Builder setUpdateAvailability(@NonNull Long setterArg) {
        this.updateAvailability = setterArg;
        return this;
      }

      public @NonNull UpdateInfo build() {
        UpdateInfo pigeonReturn = new UpdateInfo();
        pigeonReturn.setAvailableVersionCode(availableVersionCode);
        pigeonReturn.setInstallStatus(installStatus);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setUpdateAvailability(updateAvailability);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(availableVersionCode);
      toListResult.add(installStatus);
      toListResult.add(packageName);
      toListResult.add(updateAvailability);
      return toListResult;
    }

    static @NonNull UpdateInfo fromList(@NonNull ArrayList<Object> list) {
      UpdateInfo pigeonResult = new UpdateInfo();
      Object availableVersionCode = list.get(0);
      pigeonResult.setAvailableVersionCode((availableVersionCode == null) ? null : ((availableVersionCode instanceof Integer) ? (Integer) availableVersionCode : (Long) availableVersionCode));
      Object installStatus = list.get(1);
      pigeonResult.setInstallStatus((installStatus == null) ? null : ((installStatus instanceof Integer) ? (Integer) installStatus : (Long) installStatus));
      Object packageName = list.get(2);
      pigeonResult.setPackageName((String) packageName);
      Object updateAvailability = list.get(3);
      pigeonResult.setUpdateAvailability((updateAvailability == null) ? null : ((updateAvailability instanceof Integer) ? (Integer) updateAvailability : (Long) updateAvailability));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RequestResponse {
    private @NonNull Long bytesDownloaded;

    public @NonNull Long getBytesDownloaded() {
      return bytesDownloaded;
    }

    public void setBytesDownloaded(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bytesDownloaded\" is null.");
      }
      this.bytesDownloaded = setterArg;
    }

    private @NonNull Long installErrorCode;

    public @NonNull Long getInstallErrorCode() {
      return installErrorCode;
    }

    public void setInstallErrorCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"installErrorCode\" is null.");
      }
      this.installErrorCode = setterArg;
    }

    private @NonNull Long installStatus;

    public @NonNull Long getInstallStatus() {
      return installStatus;
    }

    public void setInstallStatus(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"installStatus\" is null.");
      }
      this.installStatus = setterArg;
    }

    private @NonNull String packageName;

    public @NonNull String getPackageName() {
      return packageName;
    }

    public void setPackageName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"packageName\" is null.");
      }
      this.packageName = setterArg;
    }

    private @NonNull Long totalBytesToDownload;

    public @NonNull Long getTotalBytesToDownload() {
      return totalBytesToDownload;
    }

    public void setTotalBytesToDownload(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"totalBytesToDownload\" is null.");
      }
      this.totalBytesToDownload = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RequestResponse() {}

    public static final class Builder {

      private @Nullable Long bytesDownloaded;

      public @NonNull Builder setBytesDownloaded(@NonNull Long setterArg) {
        this.bytesDownloaded = setterArg;
        return this;
      }

      private @Nullable Long installErrorCode;

      public @NonNull Builder setInstallErrorCode(@NonNull Long setterArg) {
        this.installErrorCode = setterArg;
        return this;
      }

      private @Nullable Long installStatus;

      public @NonNull Builder setInstallStatus(@NonNull Long setterArg) {
        this.installStatus = setterArg;
        return this;
      }

      private @Nullable String packageName;

      public @NonNull Builder setPackageName(@NonNull String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Long totalBytesToDownload;

      public @NonNull Builder setTotalBytesToDownload(@NonNull Long setterArg) {
        this.totalBytesToDownload = setterArg;
        return this;
      }

      public @NonNull RequestResponse build() {
        RequestResponse pigeonReturn = new RequestResponse();
        pigeonReturn.setBytesDownloaded(bytesDownloaded);
        pigeonReturn.setInstallErrorCode(installErrorCode);
        pigeonReturn.setInstallStatus(installStatus);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setTotalBytesToDownload(totalBytesToDownload);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(bytesDownloaded);
      toListResult.add(installErrorCode);
      toListResult.add(installStatus);
      toListResult.add(packageName);
      toListResult.add(totalBytesToDownload);
      return toListResult;
    }

    static @NonNull RequestResponse fromList(@NonNull ArrayList<Object> list) {
      RequestResponse pigeonResult = new RequestResponse();
      Object bytesDownloaded = list.get(0);
      pigeonResult.setBytesDownloaded((bytesDownloaded == null) ? null : ((bytesDownloaded instanceof Integer) ? (Integer) bytesDownloaded : (Long) bytesDownloaded));
      Object installErrorCode = list.get(1);
      pigeonResult.setInstallErrorCode((installErrorCode == null) ? null : ((installErrorCode instanceof Integer) ? (Integer) installErrorCode : (Long) installErrorCode));
      Object installStatus = list.get(2);
      pigeonResult.setInstallStatus((installStatus == null) ? null : ((installStatus instanceof Integer) ? (Integer) installStatus : (Long) installStatus));
      Object packageName = list.get(3);
      pigeonResult.setPackageName((String) packageName);
      Object totalBytesToDownload = list.get(4);
      pigeonResult.setTotalBytesToDownload((totalBytesToDownload == null) ? null : ((totalBytesToDownload instanceof Integer) ? (Integer) totalBytesToDownload : (Long) totalBytesToDownload));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DownloadResponse {
    private @NonNull Long code;

    public @NonNull Long getCode() {
      return code;
    }

    public void setCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"code\" is null.");
      }
      this.code = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DownloadResponse() {}

    public static final class Builder {

      private @Nullable Long code;

      public @NonNull Builder setCode(@NonNull Long setterArg) {
        this.code = setterArg;
        return this;
      }

      public @NonNull DownloadResponse build() {
        DownloadResponse pigeonReturn = new DownloadResponse();
        pigeonReturn.setCode(code);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(code);
      return toListResult;
    }

    static @NonNull DownloadResponse fromList(@NonNull ArrayList<Object> list) {
      DownloadResponse pigeonResult = new DownloadResponse();
      Object code = list.get(0);
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer) code : (Long) code));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class RustoreUpdateCodec extends StandardMessageCodec {
    public static final RustoreUpdateCodec INSTANCE = new RustoreUpdateCodec();

    private RustoreUpdateCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DownloadResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return RequestResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return UpdateInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DownloadResponse) {
        stream.write(128);
        writeValue(stream, ((DownloadResponse) value).toList());
      } else if (value instanceof RequestResponse) {
        stream.write(129);
        writeValue(stream, ((RequestResponse) value).toList());
      } else if (value instanceof UpdateInfo) {
        stream.write(130);
        writeValue(stream, ((UpdateInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface RustoreUpdate {

    void info(@NonNull Result<UpdateInfo> result);

    void listener(@NonNull Result<RequestResponse> result);

    void immediate(@NonNull Result<DownloadResponse> result);

    void silent(@NonNull Result<DownloadResponse> result);

    void download(@NonNull Result<DownloadResponse> result);

    void complete(@NonNull Result<Void> result);

    /** The codec used by RustoreUpdate. */
    static @NonNull MessageCodec<Object> getCodec() {
      return RustoreUpdateCodec.INSTANCE;
    }
    /**Sets up an instance of `RustoreUpdate` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable RustoreUpdate api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RustoreUpdate.info", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<UpdateInfo> resultCallback =
                    new Result<UpdateInfo>() {
                      public void success(UpdateInfo result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.info(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RustoreUpdate.listener", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<RequestResponse> resultCallback =
                    new Result<RequestResponse>() {
                      public void success(RequestResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.listener(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RustoreUpdate.immediate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<DownloadResponse> resultCallback =
                    new Result<DownloadResponse>() {
                      public void success(DownloadResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.immediate(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RustoreUpdate.silent", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<DownloadResponse> resultCallback =
                    new Result<DownloadResponse>() {
                      public void success(DownloadResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.silent(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RustoreUpdate.download", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<DownloadResponse> resultCallback =
                    new Result<DownloadResponse>() {
                      public void success(DownloadResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.download(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.RustoreUpdate.complete", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.complete(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
